-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Core modules for planning exams
--   
--   See README at <a>https://github.com/obcode/plexams#readme</a>
@package plexams-core
@version 1.1.0.0

module Plexams.Types.Common
type DayIndex = Int
type SlotIndex = Int
type Ancode = Integer
type Duration = Integer
type ExamType = String
type RoomID = String
type PersonID = Integer

module Plexams.Types.Groups
data Group
Group :: Degree -> Maybe Int -> Maybe Subgroup -> Maybe Integer -> Group
[groupDegree] :: Group -> Degree
[groupSemester] :: Group -> Maybe Int
[groupSubgroup] :: Group -> Maybe Subgroup
[groupRegistrations] :: Group -> Maybe Integer
data Degree
IB :: Degree
IC :: Degree
IF :: Degree
GO :: Degree
IG :: Degree
IN :: Degree
IS :: Degree
ALL :: Degree
allDegrees :: [Degree]
data Registrations
Registrations :: String -> Map Integer Integer -> Registrations
[regsGroup] :: Registrations -> String
[regs] :: Registrations -> Map Integer Integer
parseGroup :: String -> Group
data RegisteredGroup
RegisteredGroup :: Text -> Integer -> RegisteredGroup
[registeredGroupDegree] :: RegisteredGroup -> Text
[registeredGroupStudents] :: RegisteredGroup -> Integer
instance GHC.Show.Show Plexams.Types.Groups.Registrations
instance GHC.Generics.Generic Plexams.Types.Groups.Group
instance GHC.Classes.Ord Plexams.Types.Groups.Group
instance GHC.Classes.Eq Plexams.Types.Groups.Group
instance GHC.Generics.Generic Plexams.Types.Groups.Subgroup
instance GHC.Classes.Ord Plexams.Types.Groups.Subgroup
instance GHC.Classes.Eq Plexams.Types.Groups.Subgroup
instance GHC.Show.Show Plexams.Types.Groups.Subgroup
instance GHC.Generics.Generic Plexams.Types.Groups.Degree
instance GHC.Enum.Enum Plexams.Types.Groups.Degree
instance GHC.Read.Read Plexams.Types.Groups.Degree
instance GHC.Classes.Ord Plexams.Types.Groups.Degree
instance GHC.Classes.Eq Plexams.Types.Groups.Degree
instance GHC.Show.Show Plexams.Types.Groups.Degree
instance GHC.Generics.Generic Plexams.Types.Groups.RegisteredGroup
instance GHC.Classes.Eq Plexams.Types.Groups.RegisteredGroup
instance Data.Aeson.Types.FromJSON.FromJSON Plexams.Types.Groups.Group
instance Data.Aeson.Types.ToJSON.ToJSON Plexams.Types.Groups.Group
instance GHC.Show.Show Plexams.Types.Groups.Group
instance TextShow.Classes.TextShow Plexams.Types.Groups.Group
instance GHC.Read.Read Plexams.Types.Groups.Group
instance Data.Aeson.Types.FromJSON.FromJSON Plexams.Types.Groups.Subgroup
instance Data.Aeson.Types.ToJSON.ToJSON Plexams.Types.Groups.Subgroup
instance TextShow.Classes.TextShow Plexams.Types.Groups.Subgroup
instance Data.Aeson.Types.FromJSON.FromJSON Plexams.Types.Groups.Degree
instance Data.Aeson.Types.ToJSON.ToJSON Plexams.Types.Groups.Degree
instance TextShow.Classes.TextShow Plexams.Types.Groups.Degree
instance GHC.Show.Show Plexams.Types.Groups.RegisteredGroup
instance Data.Aeson.Types.FromJSON.FromJSON Plexams.Types.Groups.RegisteredGroup
instance Data.Aeson.Types.ToJSON.ToJSON Plexams.Types.Groups.RegisteredGroup

module Plexams.Types.Constraints
data Constraints
Constraints :: [Overlaps] -> [[Ancode]] -> [[Ancode]] -> [(Ancode, [Int])] -> [(Ancode, (Int, Int))] -> [[Ancode]] -> Map RoomID [(DayIndex, SlotIndex)] -> [Ancode] -> [PersonID] -> [(PersonID, [DayIndex])] -> [(Ancode, PersonID)] -> [(PersonID, [(Int, Int)])] -> Constraints
[overlaps] :: Constraints -> [Overlaps]
[notOnSameDay] :: Constraints -> [[Ancode]]
[inSameSlot] :: Constraints -> [[Ancode]]
[onOneOfTheseDays] :: Constraints -> [(Ancode, [Int])]
[fixedSlot] :: Constraints -> [(Ancode, (Int, Int))]
[inSameRoom] :: Constraints -> [[Ancode]]
[roomSlots] :: Constraints -> Map RoomID [(DayIndex, SlotIndex)]
[doNotShareRoom] :: Constraints -> [Ancode]
[noInvigilations] :: Constraints -> [PersonID]
[noInvigilationDays] :: Constraints -> [(PersonID, [DayIndex])]
[invigilatesExam] :: Constraints -> [(Ancode, PersonID)]
[impossibleInvigilationSlots] :: Constraints -> [(PersonID, [(Int, Int)])]
noConstraints :: Constraints
data Overlaps
Overlaps :: Group -> Map Integer (Map Integer Integer) -> Overlaps
[olGroup] :: Overlaps -> Group
[olOverlaps] :: Overlaps -> Map Integer (Map Integer Integer)
instance GHC.Generics.Generic Plexams.Types.Constraints.Constraints
instance GHC.Classes.Eq Plexams.Types.Constraints.Constraints
instance GHC.Show.Show Plexams.Types.Constraints.Constraints
instance GHC.Generics.Generic Plexams.Types.Constraints.Overlaps
instance GHC.Classes.Eq Plexams.Types.Constraints.Overlaps
instance GHC.Show.Show Plexams.Types.Constraints.Overlaps
instance Data.Aeson.Types.ToJSON.ToJSON Plexams.Types.Constraints.Constraints
instance Data.Aeson.Types.ToJSON.ToJSON Plexams.Types.Constraints.Overlaps

module Plexams.Types.Invigilation
data Invigilation
Invigilation :: PersonID -> DayIndex -> SlotIndex -> Maybe RoomID -> Integer -> Invigilation
[invigilationInvigilatorID] :: Invigilation -> PersonID
[invigilationDay] :: Invigilation -> DayIndex
[invigilationSlot] :: Invigilation -> SlotIndex
[invigilationRoom] :: Invigilation -> Maybe RoomID
[invigilationDuration] :: Invigilation -> Integer
data Invigilations
Invigilations :: Integer -> Integer -> Integer -> Integer -> Integer -> Invigilations
[invigilationsSumExamRooms] :: Invigilations -> Integer
[invigilationsSumReserve] :: Invigilations -> Integer
[invigilationsSumOralExams] :: Invigilations -> Integer
[invigilationsSumMaster] :: Invigilations -> Integer
[invigilationsSumLivecoding] :: Invigilations -> Integer
instance GHC.Generics.Generic Plexams.Types.Invigilation.Invigilations
instance GHC.Show.Show Plexams.Types.Invigilation.Invigilation
instance Data.Aeson.Types.ToJSON.ToJSON Plexams.Types.Invigilation.Invigilations

module Plexams.Types.Persons
data Person
Person :: PersonID -> Text -> Text -> Text -> Text -> Bool -> Person
[personID] :: Person -> PersonID
[personShortName] :: Person -> Text
[personFullName] :: Person -> Text
[personEmail] :: Person -> Text
[personFK] :: Person -> Text
[personIsLBA] :: Person -> Bool
type Persons = Map PersonID Person
type Students = Map Ancode (Set (MtkNr, StudentName))
type MtkNr = Text
type StudentName = Text
type StudentsExams = Map MtkNr (StudentName, Set Ancode)
type StudentsWithRegs = Map MtkNr StudentWithRegs
data StudentWithRegs
StudentWithRegs :: Text -> Text -> Text -> Text -> [Ancode] -> Maybe Handicap -> StudentWithRegs
[studentMtknr] :: StudentWithRegs -> Text
[studentFamilyname] :: StudentWithRegs -> Text
[studentFirstname] :: StudentWithRegs -> Text
[studentGroup] :: StudentWithRegs -> Text
[studentAncodes] :: StudentWithRegs -> [Ancode]
[studentHandicap] :: StudentWithRegs -> Maybe Handicap
studentName :: StudentWithRegs -> Text
data Handicap
Handicap :: Text -> Text -> Text -> Integer -> [Ancode] -> Bool -> Handicap
[handicapStudentname] :: Handicap -> Text
[handicapMtknr] :: Handicap -> Text
[handicapCompensationText] :: Handicap -> Text
[handicapDeltaDurationPercent] :: Handicap -> Integer
[handicapNotForExams] :: Handicap -> [Ancode]
[handicapNeedsRoomAlone] :: Handicap -> Bool
data Invigilator
Invigilator :: Bool -> [Int] -> [Int] -> [Int] -> [Int] -> [Int] -> Maybe Person -> Integer -> Integer -> Text -> Integer -> [Text] -> Float -> Float -> Float -> Float -> Integer -> Integer -> Integer -> Invigilator
[invigilatorHasConstraints] :: Invigilator -> Bool
[invigilatorExcludedDays] :: Invigilator -> [Int]
[invigilatorExamDays] :: Invigilator -> [Int]
[invigilatorWantDays] :: Invigilator -> [Int]
[invigilatorCanDays] :: Invigilator -> [Int]
[invigilatorInvigilationDays] :: Invigilator -> [Int]
[invigilatorPerson] :: Invigilator -> Maybe Person
[invigilatorMinutesTodo] :: Invigilator -> Integer
[invigilatorsMinutesPlanned] :: Invigilator -> Integer
[invigilatorName] :: Invigilator -> Text
[invigilatorID] :: Invigilator -> Integer
[invigilatorExcludedDates] :: Invigilator -> [Text]
[invigilatorPartTime] :: Invigilator -> Float
[invigilatorFreeSemester] :: Invigilator -> Float
[invigilatorOvertimeThisSemester] :: Invigilator -> Float
[invigilatorOvertimeLastSemester] :: Invigilator -> Float
[invigilatorOralExams] :: Invigilator -> Integer
[invigilatorMaster] :: Invigilator -> Integer
[invigilatorLiveCoding] :: Invigilator -> Integer
type Invigilators = Map InvigilatorID Invigilator
addHandicaps :: StudentsWithRegs -> [Handicap] -> StudentsWithRegs
instance GHC.Generics.Generic Plexams.Types.Persons.Invigilator
instance GHC.Classes.Eq Plexams.Types.Persons.Invigilator
instance GHC.Show.Show Plexams.Types.Persons.Invigilator
instance GHC.Show.Show Plexams.Types.Persons.StudentWithRegs
instance GHC.Generics.Generic Plexams.Types.Persons.StudentWithRegs
instance GHC.Generics.Generic Plexams.Types.Persons.Handicap
instance GHC.Classes.Eq Plexams.Types.Persons.Handicap
instance GHC.Generics.Generic Plexams.Types.Persons.Person
instance GHC.Classes.Ord Plexams.Types.Persons.Person
instance GHC.Show.Show Plexams.Types.Persons.Person
instance GHC.Classes.Eq Plexams.Types.Persons.Person
instance Data.Aeson.Types.FromJSON.FromJSON Plexams.Types.Persons.Invigilator
instance Data.Aeson.Types.ToJSON.ToJSON Plexams.Types.Persons.Invigilator
instance GHC.Classes.Eq Plexams.Types.Persons.StudentWithRegs
instance Data.Aeson.Types.FromJSON.FromJSON Plexams.Types.Persons.StudentWithRegs
instance Data.Aeson.Types.ToJSON.ToJSON Plexams.Types.Persons.StudentWithRegs
instance Data.Aeson.Types.FromJSON.FromJSON Plexams.Types.Persons.Handicap
instance Data.Aeson.Types.ToJSON.ToJSON Plexams.Types.Persons.Handicap
instance GHC.Show.Show Plexams.Types.Persons.Handicap
instance TextShow.Classes.TextShow Plexams.Types.Persons.Person
instance Data.Aeson.Types.FromJSON.FromJSON Plexams.Types.Persons.Person
instance Data.Aeson.Types.ToJSON.ToJSON Plexams.Types.Persons.Person

module Plexams.Types.PlanManip
data AddExamToSlot
AddExamToSlot :: Integer -> Int -> Int -> AddExamToSlot
[planManipAnCode] :: AddExamToSlot -> Integer
[planManipDay] :: AddExamToSlot -> Int
[planManipSlot] :: AddExamToSlot -> Int
data AddRoomToExam
AddRoomToExam :: Integer -> String -> [Text] -> Maybe Integer -> Bool -> Bool -> AddRoomToExam
[addRoomAnCode] :: AddRoomToExam -> Integer
[addRoomRoomName] :: AddRoomToExam -> String
[addRoomStudentsInRoom] :: AddRoomToExam -> [Text]
[addRoomDeltaDuration] :: AddRoomToExam -> Maybe Integer
[addRoomNTA] :: AddRoomToExam -> Bool
[addRoomReserve] :: AddRoomToExam -> Bool
data AddInvigilatorToRoomOrSlot
AddInvigilatorToRoomOrSlot :: PersonID -> (DayIndex, SlotIndex) -> Maybe String -> AddInvigilatorToRoomOrSlot
[addInvigilatorID] :: AddInvigilatorToRoomOrSlot -> PersonID
[addInvigilatorSlot] :: AddInvigilatorToRoomOrSlot -> (DayIndex, SlotIndex)
[addInvigilatorRoom] :: AddInvigilatorToRoomOrSlot -> Maybe String
data RemoveInvigilatorFromRoomOrSlot
RemoveInvigilatorFromRoomOrSlot :: PersonID -> (DayIndex, SlotIndex) -> Maybe String -> RemoveInvigilatorFromRoomOrSlot
[removeInvigilatorID] :: RemoveInvigilatorFromRoomOrSlot -> PersonID
[removeInvigilatorSlot] :: RemoveInvigilatorFromRoomOrSlot -> (DayIndex, SlotIndex)
[removeInvigilatorRoom] :: RemoveInvigilatorFromRoomOrSlot -> Maybe String
instance GHC.Generics.Generic Plexams.Types.PlanManip.RemoveInvigilatorFromRoomOrSlot
instance GHC.Show.Show Plexams.Types.PlanManip.RemoveInvigilatorFromRoomOrSlot
instance GHC.Classes.Eq Plexams.Types.PlanManip.RemoveInvigilatorFromRoomOrSlot
instance GHC.Generics.Generic Plexams.Types.PlanManip.AddInvigilatorToRoomOrSlot
instance GHC.Show.Show Plexams.Types.PlanManip.AddInvigilatorToRoomOrSlot
instance GHC.Classes.Eq Plexams.Types.PlanManip.AddInvigilatorToRoomOrSlot
instance GHC.Show.Show Plexams.Types.PlanManip.AddRoomToExam
instance GHC.Generics.Generic Plexams.Types.PlanManip.AddExamToSlot
instance GHC.Show.Show Plexams.Types.PlanManip.AddExamToSlot
instance GHC.Classes.Eq Plexams.Types.PlanManip.AddExamToSlot
instance Data.Aeson.Types.ToJSON.ToJSON Plexams.Types.PlanManip.RemoveInvigilatorFromRoomOrSlot
instance Data.Aeson.Types.FromJSON.FromJSON Plexams.Types.PlanManip.RemoveInvigilatorFromRoomOrSlot
instance Data.Aeson.Types.ToJSON.ToJSON Plexams.Types.PlanManip.AddInvigilatorToRoomOrSlot
instance Data.Aeson.Types.FromJSON.FromJSON Plexams.Types.PlanManip.AddInvigilatorToRoomOrSlot
instance Data.Aeson.Types.FromJSON.FromJSON Plexams.Types.PlanManip.AddRoomToExam
instance Data.Aeson.Types.ToJSON.ToJSON Plexams.Types.PlanManip.AddExamToSlot
instance Data.Aeson.Types.FromJSON.FromJSON Plexams.Types.PlanManip.AddExamToSlot

module Plexams.Types.Rooms
data Room
Room :: RoomID -> Integer -> Duration -> Maybe Invigilator -> Bool -> Bool -> [StudentWithRegs] -> Room

-- | Raum-Nr, z.B. <tt>"R3.014"</tt>
[roomID] :: Room -> RoomID

-- | maximale Anzahl an Prüfungsplätzen
[maxSeats] :: Room -> Integer

-- | falls der Raum für NTA genutzt wird, Anzahl der Minuten die die
--   Prüfung länger dauert
[deltaDuration] :: Room -> Duration

-- | Aufsicht
[invigilator] :: Room -> Maybe Invigilator

-- | <tt>True</tt>, Raum ist eingeplant, wird aber nicht im ZPA
--   veröffentlicht
[reserveRoom] :: Room -> Bool

-- | <tt>True</tt> Raum für NTA
[handicapCompensation] :: Room -> Bool
[studentsInRoom] :: Room -> [StudentWithRegs]
seatsPlanned :: Room -> Integer
data PlannedRoomWithSlots
PlannedRoomWithSlots :: String -> [PlannedRoomSlot] -> PlannedRoomWithSlots
[plannedRoomID] :: PlannedRoomWithSlots -> String
[plannedRoomDaysAndSlots] :: PlannedRoomWithSlots -> [PlannedRoomSlot]
data PlannedRoomSlot
PlannedRoomSlot :: String -> Int -> [(Int, String)] -> PlannedRoomSlot
[plannedRoomDay] :: PlannedRoomSlot -> String
[plannedRoomDayNumber] :: PlannedRoomSlot -> Int
[plannedRoomSlots] :: PlannedRoomSlot -> [(Int, String)]
instance GHC.Generics.Generic Plexams.Types.Rooms.PlannedRoomWithSlots
instance GHC.Generics.Generic Plexams.Types.Rooms.PlannedRoomSlot
instance GHC.Generics.Generic Plexams.Types.Rooms.Room
instance GHC.Classes.Eq Plexams.Types.Rooms.Room
instance Data.Aeson.Types.FromJSON.FromJSON Plexams.Types.Rooms.PlannedRoomWithSlots
instance Data.Aeson.Types.ToJSON.ToJSON Plexams.Types.Rooms.PlannedRoomWithSlots
instance Data.Aeson.Types.FromJSON.FromJSON Plexams.Types.Rooms.PlannedRoomSlot
instance Data.Aeson.Types.ToJSON.ToJSON Plexams.Types.Rooms.PlannedRoomSlot
instance Data.Aeson.Types.FromJSON.FromJSON Plexams.Types.Rooms.Room
instance Data.Aeson.Types.ToJSON.ToJSON Plexams.Types.Rooms.Room
instance GHC.Show.Show Plexams.Types.Rooms.Room

module Plexams.Types.Exam
data Exam
Exam :: Ancode -> String -> Person -> Duration -> [Room] -> Bool -> Bool -> [Group] -> ExamType -> Maybe (Int, Int) -> [StudentWithRegs] -> Integer -> [RegisteredGroup] -> Map Ancode Integer -> [StudentWithRegs] -> [Ancode] -> [Ancode] -> Bool -> Exam

-- | Anmeldecode Prüfungsamt
[anCode] :: Exam -> Ancode

-- | Name der Prüfung
[name] :: Exam -> String

-- | Prüfer
[lecturer] :: Exam -> Person

-- | Dauer der Prüfung in Minuten
[duration] :: Exam -> Duration

-- | Liste der Räume in denen die Prüfung statt findet
[rooms] :: Exam -> [Room]

-- | <tt>False</tt> bei Prüfungen, die zwar mit erfasst werden, aber nicht
--   geplant werden können
[plannedByMe] :: Exam -> Bool

-- | <tt>True</tt> bei einer Wiederholungsklausur
[reExam] :: Exam -> Bool

-- | Studierendengruppen die an der Prüfung teilnehmen
[groups] :: Exam -> [Group]

-- | Typ der Prüfung aus ZPA
[examType] :: Exam -> ExamType

-- | (Tag, Slot)
[slot] :: Exam -> Maybe (Int, Int)
[registeredStudents] :: Exam -> [StudentWithRegs]
[registeredStudentsCount] :: Exam -> Integer
[registeredGroups] :: Exam -> [RegisteredGroup]

-- | Ancode maps to number of students with this conflict
[conflictingAncodes] :: Exam -> Map Ancode Integer
[handicapStudents] :: Exam -> [StudentWithRegs]
[sameRoom] :: Exam -> [Ancode]
[sameSlot] :: Exam -> [Ancode]
[shareRoom] :: Exam -> Bool
registrations :: Exam -> Integer
isScheduled :: Exam -> Bool
isUnscheduled :: Exam -> Bool
isGOExam :: Exam -> Bool
withHandicaps :: Exam -> Bool
handicapStudentsNeedsRoomAlone :: Exam -> [StudentWithRegs]
withHandicapsNeedsRoomAlone :: Exam -> Bool
notPlannedByMe :: [Ancode] -> Exam -> Exam
seatsMissing :: Exam -> Integer
showMinimal :: Exam -> String
instance GHC.Generics.Generic Plexams.Types.Exam.Exam
instance GHC.Classes.Eq Plexams.Types.Exam.Exam
instance Data.Aeson.Types.FromJSON.FromJSON Plexams.Types.Exam.Exam
instance Data.Aeson.Types.ToJSON.ToJSON Plexams.Types.Exam.Exam
instance GHC.Show.Show Plexams.Types.Exam.Exam

module Plexams.Types.SemesterConfig
data SemesterConfig
SemesterConfig :: Text -> Day -> Day -> [Day] -> [(Int, Int)] -> [String] -> SemesterConfigFiles -> [AvailableRoom] -> [[Integer]] -> [Ancode] -> Bool -> SemesterConfig

-- | Semester
[semester] :: SemesterConfig -> Text

-- | Erster Tag des Prüfungszeitraumes, z.B. <tt>fromGregorian 2017 7
--   10</tt>
[firstDay] :: SemesterConfig -> Day

-- | Letzter Tag des Prüfungszeitraumes, z.B. <tt>fromGregorian 2017 7
--   21</tt>
[lastDay] :: SemesterConfig -> Day

-- | vom ersten bis letzten Tag OHNE Wochenende
[examDays] :: SemesterConfig -> [Day]
[goSlots] :: SemesterConfig -> [(Int, Int)]

-- | Liste von Slots als Zeitstrings in der Form <tt>HH:MM</tt>. Ein Slot
--   ist IMMER 120 Minuten lang
[slotsPerDay] :: SemesterConfig -> [String]
[files] :: SemesterConfig -> SemesterConfigFiles
[availableRooms] :: SemesterConfig -> [AvailableRoom]
[importedExams] :: SemesterConfig -> [[Integer]]
[goOtherExams] :: SemesterConfig -> [Ancode]
[scheduleFrozen] :: SemesterConfig -> Bool
nonGOSlots :: SemesterConfig -> [(Int, Int)]
data SemesterConfigFiles
SemesterConfigFiles :: Maybe FilePath -> Maybe FilePath -> Maybe FilePath -> Maybe FilePath -> Maybe FilePath -> Maybe FilePath -> Maybe FilePath -> Maybe FilePath -> Maybe FilePath -> SemesterConfigFiles

-- | Datei in der die Prüfungen für das Semester vom ZPA stehen
[initialPlanFile] :: SemesterConfigFiles -> Maybe FilePath

-- | Datei in der die Personen für das Semester vom ZPA stehen
[personsFile] :: SemesterConfigFiles -> Maybe FilePath
[planManipFile] :: SemesterConfigFiles -> Maybe FilePath
[handicapsFile] :: SemesterConfigFiles -> Maybe FilePath
[studentsRegsFile] :: SemesterConfigFiles -> Maybe FilePath
[roomsFile] :: SemesterConfigFiles -> Maybe FilePath
[constraintsFile] :: SemesterConfigFiles -> Maybe FilePath
[invigilatorsFile] :: SemesterConfigFiles -> Maybe FilePath
[invigilationsFile] :: SemesterConfigFiles -> Maybe FilePath
examDaysAsStrings :: SemesterConfig -> [String]
slotsAsStringsForRoom :: SemesterConfig -> [String]
data AvailableRoom
AvailableRoom :: String -> Integer -> Bool -> Bool -> AvailableRoom
[availableRoomName] :: AvailableRoom -> String
[availableRoomMaxSeats] :: AvailableRoom -> Integer
[availableRoomHandicap] :: AvailableRoom -> Bool
[availableRoomNeedsRequest] :: AvailableRoom -> Bool
type AvailableRooms = Map (DayIndex, SlotIndex) ([AvailableRoom], [AvailableRoom], [AvailableRoom])
showSlot :: SemesterConfig -> Maybe (DayIndex, SlotIndex) -> String
allSlots :: SemesterConfig -> [(Int, Int)]
instance GHC.Generics.Generic Plexams.Types.SemesterConfig.SemesterConfig
instance GHC.Show.Show Plexams.Types.SemesterConfig.SemesterConfig
instance GHC.Classes.Eq Plexams.Types.SemesterConfig.SemesterConfig
instance GHC.Generics.Generic Plexams.Types.SemesterConfig.AvailableRoom
instance GHC.Show.Show Plexams.Types.SemesterConfig.AvailableRoom
instance GHC.Classes.Eq Plexams.Types.SemesterConfig.AvailableRoom
instance GHC.Generics.Generic Plexams.Types.SemesterConfig.SemesterConfigFiles
instance GHC.Show.Show Plexams.Types.SemesterConfig.SemesterConfigFiles
instance GHC.Classes.Eq Plexams.Types.SemesterConfig.SemesterConfigFiles
instance Data.Aeson.Types.FromJSON.FromJSON Plexams.Types.SemesterConfig.SemesterConfig
instance Data.Aeson.Types.ToJSON.ToJSON Plexams.Types.SemesterConfig.SemesterConfig
instance Data.Aeson.Types.FromJSON.FromJSON Plexams.Types.SemesterConfig.AvailableRoom
instance Data.Aeson.Types.ToJSON.ToJSON Plexams.Types.SemesterConfig.AvailableRoom
instance Data.Aeson.Types.FromJSON.FromJSON Plexams.Types.SemesterConfig.SemesterConfigFiles
instance Data.Aeson.Types.ToJSON.ToJSON Plexams.Types.SemesterConfig.SemesterConfigFiles

module Plexams.Types.Slots
data Slot
Slot :: Map Ancode Exam -> Maybe Invigilator -> Slot
[examsInSlot] :: Slot -> Map Ancode Exam

-- | Reserveaufsicht für die Prüfung
[reserveInvigilator] :: Slot -> Maybe Invigilator
type Slots = Map (DayIndex, SlotIndex) Slot
adjacentSlotPairs :: Slots -> [[((DayIndex, SlotIndex), Slot)]]
slotsByDay :: Slots -> [[((DayIndex, SlotIndex), Slot)]]
slotByRooms :: Slot -> [[(Room, Exam)]]
instance GHC.Generics.Generic Plexams.Types.Slots.Slot
instance GHC.Classes.Eq Plexams.Types.Slots.Slot
instance GHC.Show.Show Plexams.Types.Slots.Slot
instance Data.Aeson.Types.FromJSON.FromJSON Plexams.Types.Slots.Slot
instance Data.Aeson.Types.ToJSON.ToJSON Plexams.Types.Slots.Slot

module Plexams.Types.Plan
data Plan
Plan :: SemesterConfig -> Slots -> Map Ancode Exam -> Persons -> Constraints -> Invigilators -> Map DayIndex ([PersonID], [PersonID]) -> [Exam] -> Plan
[semesterConfig] :: Plan -> SemesterConfig
[slots] :: Plan -> Slots
[unscheduledExams] :: Plan -> Map Ancode Exam
[persons] :: Plan -> Persons
[constraints] :: Plan -> Constraints
[invigilators] :: Plan -> Invigilators
[invigilatorsPerDay] :: Plan -> Map DayIndex ([PersonID], [PersonID])
[initialPlan] :: Plan -> [Exam]
scheduledExams :: Plan -> [Exam]
allExams :: Plan -> [Exam]
allExamsPlannedByMe :: Plan -> [Exam]
examsWithNTA :: Plan -> [Exam]
examsWithNTARoomAlone :: Plan -> [Exam]
isScheduledAncode :: Ancode -> Plan -> Bool
isUnscheduledAncode :: Ancode -> Plan -> Bool
isUnknownExamAncode :: Ancode -> Plan -> Bool
mkAvailableRooms :: Plan -> [AvailableRoom] -> AvailableRooms
maxDayIndex :: Plan -> DayIndex
maxSlotIndex :: Plan -> SlotIndex
examDateAsString :: Exam -> Plan -> String
examSlotAsString :: Exam -> Plan -> String
setSlotsOnExams :: Plan -> Plan
dateString :: Day -> String
instance GHC.Generics.Generic Plexams.Types.Plan.Plan
instance GHC.Classes.Eq Plexams.Types.Plan.Plan
instance GHC.Show.Show Plexams.Types.Plan.Plan
instance Data.Aeson.Types.ToJSON.ToJSON Plexams.Types.Plan.Plan

module Plexams.Types.Validation
data ValidationResult
EverythingOk :: ValidationResult
SoftConstraintsBroken :: ValidationResult
HardConstraintsBroken :: ValidationResult
data ValidationRecord
ValidationRecord :: ValidationRecordType -> Text -> ValidationRecord
[validationRecordType] :: ValidationRecord -> ValidationRecordType
[validationRecordText] :: ValidationRecord -> Text
data ValidationRecordType
Info :: ValidationRecordType
SoftConstraintBroken :: ValidationRecordType
HardConstraintBroken :: ValidationRecordType
data Validation
Validation :: ValidationResult -> [ValidationRecord] -> Validation
[result] :: Validation -> ValidationResult
[brokenConstraints] :: Validation -> [ValidationRecord]
data ValidateWhat
ValidateSources :: ValidateWhat
ValidateSchedule :: ValidateWhat
ValidateRooms :: ValidateWhat
ValidateInvigilation :: ValidateWhat
validateWhat :: [ValidateWhat]
validationResult :: [ValidationResult] -> ValidationResult
instance GHC.Enum.Enum Plexams.Types.Validation.ValidateWhat
instance GHC.Generics.Generic Plexams.Types.Validation.ValidateWhat
instance GHC.Show.Show Plexams.Types.Validation.ValidateWhat
instance GHC.Classes.Eq Plexams.Types.Validation.ValidateWhat
instance GHC.Generics.Generic Plexams.Types.Validation.Validation
instance GHC.Generics.Generic Plexams.Types.Validation.ValidationRecord
instance GHC.Classes.Eq Plexams.Types.Validation.ValidationRecord
instance GHC.Generics.Generic Plexams.Types.Validation.ValidationRecordType
instance GHC.Classes.Eq Plexams.Types.Validation.ValidationRecordType
instance GHC.Generics.Generic Plexams.Types.Validation.ValidationResult
instance GHC.Classes.Ord Plexams.Types.Validation.ValidationResult
instance GHC.Classes.Eq Plexams.Types.Validation.ValidationResult
instance Data.Aeson.Types.FromJSON.FromJSON Plexams.Types.Validation.ValidateWhat
instance Data.Aeson.Types.ToJSON.ToJSON Plexams.Types.Validation.ValidateWhat
instance Data.Aeson.Types.ToJSON.ToJSON Plexams.Types.Validation.Validation
instance Data.Aeson.Types.ToJSON.ToJSON Plexams.Types.Validation.ValidationRecord
instance Data.Aeson.Types.ToJSON.ToJSON Plexams.Types.Validation.ValidationRecordType
instance GHC.Show.Show Plexams.Types.Validation.ValidationResult
instance Data.Aeson.Types.ToJSON.ToJSON Plexams.Types.Validation.ValidationResult

module Plexams.Types.ZPA
data ZPAExam
ZPAExam :: Integer -> String -> String -> Integer -> Integer -> [ZPARoom] -> ZPAExam
[zpaExamAnCode] :: ZPAExam -> Integer
[zpaExamDate] :: ZPAExam -> String
[zpaExamTime] :: ZPAExam -> String
[zpaTotalNumber] :: ZPAExam -> Integer
[zpaExamReserveInvigilatorId] :: ZPAExam -> Integer
[zpaExamRooms] :: ZPAExam -> [ZPARoom]
data ZPARoom
ZPARoom :: String -> Integer -> Bool -> Bool -> Integer -> Integer -> ZPARoom
[zpaRoomNumber] :: ZPARoom -> String
[zpaRoomInvigilatorId] :: ZPARoom -> Integer
[zpaRoomReserveRoom] :: ZPARoom -> Bool
[zpaRoomHandicapCompensation] :: ZPARoom -> Bool
[zpaRoomDuration] :: ZPARoom -> Integer
[zpaRoomNumberStudents] :: ZPARoom -> Integer
data StudentsExam
StudentsExam :: Integer -> String -> Text -> String -> String -> StudentsExam
[studentsExamAnCode] :: StudentsExam -> Integer
[studentsExamName] :: StudentsExam -> String
[studentsExamLecturerName] :: StudentsExam -> Text
[studentsExamDate] :: StudentsExam -> String
[studentsExamTime] :: StudentsExam -> String
instance GHC.Generics.Generic Plexams.Types.ZPA.StudentsExam
instance GHC.Generics.Generic Plexams.Types.ZPA.ZPAExam
instance GHC.Generics.Generic Plexams.Types.ZPA.ZPARoom
instance Data.Aeson.Types.FromJSON.FromJSON Plexams.Types.ZPA.StudentsExam
instance Data.Aeson.Types.ToJSON.ToJSON Plexams.Types.ZPA.StudentsExam
instance Data.Aeson.Types.FromJSON.FromJSON Plexams.Types.ZPA.ZPAExam
instance Data.Aeson.Types.ToJSON.ToJSON Plexams.Types.ZPA.ZPAExam
instance Data.Aeson.Types.FromJSON.FromJSON Plexams.Types.ZPA.ZPARoom
instance Data.Aeson.Types.ToJSON.ToJSON Plexams.Types.ZPA.ZPARoom

module Plexams.Types

module Plexams.Query
queryByAnCode :: Integer -> Plan -> [Exam]
queryByName :: String -> Plan -> [Exam]
queryByLecturer :: String -> Plan -> [Exam]
queryByLecturerID :: PersonID -> Plan -> [Exam]
queryByGroup :: String -> Bool -> Plan -> [Exam]
queryByRegisteredGroup :: String -> Bool -> Plan -> [Exam]
querySlot :: (Int, Int) -> Plan -> [Exam]
queryDay :: Int -> Plan -> [Exam]
examDaysPerLecturer :: Plan -> Map PersonID [DayIndex]
lecturerExamDays :: Plan -> [(Person, [Int])]
examsWithSameName :: Plan -> [[Exam]]
queryStudentByName :: String -> Plan -> [(MtkNr, (StudentName, Set Ancode))]
queryRoomByID :: String -> Plan -> PlannedRoomWithSlots
conflictingSlotsForAncode :: Ancode -> Plan -> ([(Int, Int)], [(Int, Int)])
findExportedExams :: Plan -> [Exam]

module Plexams.Invigilation
mkInvigilations :: Plan -> Invigilations
invigilatorsPerDay :: Plan -> Map DayIndex ([PersonID], [PersonID])
sumPercentInvigilator :: Invigilator -> Integer
sumPercentAllInvigilators :: Plan -> Integer
hundertPercentInMinutes :: Plan -> Integer
invigilatorsWithMinutesPlanned :: Plan -> Map PersonID Integer
invigilatorAddMinutes :: Plan -> Plan
addInvigilatorsPerDay :: Plan -> Plan
mkInvigilatorsPerDay :: Plan -> Map DayIndex ([Invigilator], [Invigilator])
invigilationsPerPerson :: Plan -> Map PersonID [Invigilation]
addInvigilators :: [Invigilator] -> Plan -> Plan
minutesForReserve :: Integer

module Plexams.Statistics
initialPlanStatistics :: Plan -> String
planStatistics :: Plan -> String

module Plexams.PlanManip
makePlan :: [Exam] -> SemesterConfig -> Persons -> Constraints -> Plan
updateExamByAncodeWith :: Plan -> Ancode -> (Exam -> Exam) -> Plan
applyAddExamToSlotListToPlan :: Plan -> [AddExamToSlot] -> Plan
addExamToSlot :: Integer -> Int -> Int -> Plan -> Plan
applyAddInvigilatorsToPlan :: Plan -> [AddInvigilatorToRoomOrSlot] -> Plan
removeInvigilatorFromExamOrSlot :: Integer -> (DayIndex, SlotIndex) -> Maybe String -> Plan -> Plan
addInvigilatorToExamOrSlot :: Integer -> (DayIndex, SlotIndex) -> Maybe String -> Plan -> Plan
applyAddRoomToExamListToPlan :: Plan -> [AddRoomToExam] -> Plan
addStudentRegistrationsToPlan :: StudentsWithRegs -> Plan -> Plan
